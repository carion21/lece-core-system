// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar(255)
  label       String   @db.VarChar(255)
  value       String   @db.VarChar(255)
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

model User {
  id             Int              @id @default(autoincrement())
  code           String           @db.VarChar(255)
  lastname       String           @db.VarChar(255)
  firstname      String           @db.VarChar(255)
  email          String           @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  password       String           @db.Text
  status         Boolean          @default(true)
  profilePicture String?          @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      Int?
  profileId      Int
  profile        Profile          @relation(fields: [profileId], references: [id])
  Author         Author[]
  Book           Book[]
  BookSubmission BookSubmission[]
  Genre          Genre[]
  Message        Message[]
}

model Author {
  id        Int       @id @default(autoincrement())
  code      String    @db.VarChar(255)
  name      String    @db.VarChar(255)
  slug      String    @db.VarChar(255)
  email     String?   @db.VarChar(255)
  biography String    @db.Text
  photo     String    @db.Text
  status    Boolean   @default(true)
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  editorId  Int
  books     Book[]
  editor    User      @relation(fields: [editorId], references: [id])
}

model Book {
  id                Int         @id @default(autoincrement())
  code              String      @db.VarChar(255)
  slug              String      @db.VarChar(255)
  title             String      @db.VarChar(255)
  summary           String      @db.Text
  cover             String?     @db.Text
  file              String?     @db.Text
  status            Boolean     @default(true)
  deleted           Boolean     @default(false)
  isInTop           Boolean     @default(false)
  rankInTop         Int?
  isRecent          Boolean     @default(false)
  isInReleaseFuture Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  createdBy         Int?
  releaseDate       DateTime?
  pages             Int         @default(0)
  authorId          Int
  editorId          Int
  author            Author      @relation(fields: [authorId], references: [id])
  BookGenre         BookGenre[]
  editor            User        @relation(fields: [editorId], references: [id])
}

model Genre {
  id          Int         @id @default(autoincrement())
  code        String      @db.VarChar(255)
  name        String      @db.VarChar(255)
  description String      @db.Text
  slug        String      @db.VarChar(255)
  status      Boolean     @default(true)
  deleted     Boolean     @default(false)
  editorId    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  BookGenre   BookGenre[]
  editor      User?       @relation(fields: [editorId], references: [id])
}

model BookGenre {
  id        Int      @id @default(autoincrement())
  bookId    Int
  genreId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  genre     Genre    @relation(fields: [genreId], references: [id])
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  code      String   @db.VarChar(255)
  title     String   @db.VarChar(255)
  content   String   @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  code      String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  code      String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  subject   String   @db.VarChar(255)
  content   String   @db.Text
  readerId  Int?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reader    User?    @relation(fields: [readerId], references: [id])
}

model BookSubmission {
  id        Int       @id @default(autoincrement())
  code      String    @db.VarChar(255)
  name      String    @db.VarChar(255)
  email     String    @db.VarChar(255)
  phone     String    @db.VarChar(255)
  title     String    @db.VarChar(255)
  summary   String    @db.Text
  file      String    @db.Text
  viewed    Boolean   @default(false)
  viewerId  Int?
  viewedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  viewer    User?     @relation(fields: [viewerId], references: [id])
}
